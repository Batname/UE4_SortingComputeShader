//Since we can't #include private Engine shaders such as Common.ush we have to copy the needed Shaders from the Engine' Shader directory.
//When this gets chaned in the future, we could change this to #include "/Engine/Private/Common.ush".
#include "/Engine/Private/Common.ush"

////////////////////////////
// Bitonic Sort
// Compute Shader
// by Valentin Kraft 
///
// Inspired by the ComputeShaderSort11
// example by Microsoft. 
///////////////////////////// 

#define BITONIC_BLOCK_SIZE 256 
#define TRANSPOSE_BLOCK_SIZE 16 

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
//cbuffer CB : register(b0)
//{
//    unsigned int g_iLevel;
//    unsigned int g_iLevelMask;
//    unsigned int g_iWidth;
//    unsigned int g_iHeight;
//};

RWTexture2D<float4> OutputSurface;      //UAV Texture
Texture2D<float4> PointPosTex;          //Read-Only Point Position Texture

// Thread group shared memory limit (DX11): 32KB
// Only shared witin a thread group!
groupshared float shared_data[BITONIC_BLOCK_SIZE];

// In order to make full use of the resources of the GPU, there should be at least as many thread groups as there are multiprocessors on the GPU, and ideally two ormore #ToDo: Make dynamic
// Max number of threads in a group (DX11): 1024
[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void MainComputeShader(uint3 Gid : SV_GroupID,              //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
                        uint3 DTid : SV_DispatchThreadID,   //atm: 0...256 in rows & columns (XY)   --> "global" thread id
                        uint3 GTid : SV_GroupThreadID,      //atm: 0...256, -,- in columns (X)      --> current threadId in group / "local" threadId
                        uint GI : SV_GroupIndex)            //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group
{
	//Set up some variables we are going to need
	float sizeX, sizeY;
	OutputSurface.GetDimensions(sizeX, sizeY);
    float4 camPos = float4(0.0, 0.0, 0.0, 0.0); // #Temp
    float4 pointPos = PointPosTex.Load(int3(DTid.xy, 0));


    // Compute distance and store in shared data
    //shared_data[GI] = pointPos;
    GroupMemoryBarrierWithGroupSync();

    // Sort the shared data
    //unsigned int g_iLevel = 2;
    //unsigned int g_iLevelMask = 2;

    uint3 pDTid = uint3(DTid.x, DTid.y + 128, 0);       //partner id
    float4 partnerPointPos = PointPosTex.Load(int3(pDTid));
    GroupMemoryBarrierWithGroupSync();

    if (distance(partnerPointPos, camPos) > distance(pointPos, camPos))
    {
        OutputSurface[DTid.xy] = pointPos;
        OutputSurface[pDTid.xy] = partnerPointPos;
    }
    else
    {
        OutputSurface[DTid.xy] = partnerPointPos;
        OutputSurface[pDTid.xy] = pointPos;
    }

    // Now each thread must pick the min or max of the two elements it is comparing. The thread cannot compare and swap both elements because that would require random access writes.
    //for (unsigned int j = g_iLevel >> 1; j > 0; j >>= 1)
    //{
    //    float result = ((shared_data[GI & ~j] <= shared_data[GI | j]) == (bool) (g_iLevelMask & DTid.x)) ? shared_data[GI ^ j] : shared_data[GI];
    //    GroupMemoryBarrierWithGroupSync();
    //    shared_data[GI] = result;
    //    GroupMemoryBarrierWithGroupSync();
    //}

    //OutputSurface[DTid.xy] = float4((float3) Gid, 0) / 256;

}

